plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

version = mod_version
group = mod_group
archivesBaseName = 'minetiface-fabric_' + minecraft_version

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
   	name = 'ParchmentMC'
      url = 'https://maven.parchmentmc.org'
   }
}

tasks.register("prepareKotlinBuildScriptModel"){}

configurations {
	runtime {
		extendsFrom implementation
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	// mappings loom.layered {
	// 	officialMojangMappings()
	// 	parchment("org.parchmentmc.data:parchment-1.20.6:2024.06.02@zip")
	// }
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	implementation project(':commons')
	include project(':commons')
	modImplementation "io.github.blackspherefollower:buttplug4j:3.0.67"
	include "io.github.blackspherefollower:buttplug4j:3.0.67"

	// All transitive dependencies of the buttplug4j. This is not pretty but I didn't find any
	// other way to add transitive dependencies to the mod JAR
	include 'jakarta.websocket:jakarta.websocket-api:2.1.0'
	include 'org.eclipse.jetty.websocket:websocket-javax-client:10.0.14'
	include 'com.fasterxml.jackson.core:jackson-annotations:2.14.2'
	include 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
	include 'org.eclipse.jetty:jetty-client:10.0.14'
	include 'org.eclipse.jetty.toolchain:jetty-javax-websocket-api:1.1.2'
	include 'org.eclipse.jetty.websocket:websocket-javax-common:10.0.14'
	include 'org.eclipse.jetty.websocket:websocket-core-client:10.0.14'
	include 'org.eclipse.jetty.websocket:websocket-core-common:10.0.14'
	include 'org.eclipse.jetty:jetty-xml:10.0.14'
	include 'org.eclipse.jetty:jetty-http:10.0.14'
	include 'org.eclipse.jetty:jetty-io:10.0.14'
	include 'org.eclipse.jetty:jetty-jmx:10.0.14'
	include 'org.eclipse.jetty:jetty-alpn-client:10.0.14'
	include 'org.eclipse.jetty:jetty-util:10.0.14'

	include "com.fasterxml.jackson.core:jackson-databind:2.12.1"
	include "com.fasterxml.jackson.core:jackson-annotations:2.12.1"
	include "com.fasterxml.jackson.core:jackson-core:2.12.1"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
